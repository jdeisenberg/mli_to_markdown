Hello - from /home/david/.vscode/extensions/jaredly.reason-vscode-1.5.2/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","format_width":"80","per_value_codelens":true,"dependencies_codelens":false,"opens_codelens":true,"show_module_path_on_hover":false,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliCommentParser.re","languageId":"reason","version":1,"text":"/*\n * These are the possible states that the parser can be in\n * SimplePre is preformatted text in [ ]\n * MultiLine is preformatted text in {[  [}\n */\n\ntype scanState =\n  | Scan\n  | OpenParen\n  | PossibleComment\n  | PossibleDocComment\n  | InComment\n  | InDocComment\n  | SimplePre\n  | PossibleMultiLine\n  | MultiLine\n  | PossibleEndMultiLine\n  | PossibleEndComment;\n  \n/*\n * This is a record used to keep track of the progress of parsing\n * the document comments\n */\ntype statusType = {\n  state: scanState,\n  prevState: scanState,\n  inStr: string,\n  position: int, /* easier to keep track of this than constantly update the string being scanned */\n  toConvert: string, /* the currently collected ML to convert to Reason */\n  finalString: string\n};\n\n/*\n * Convert a scanState to a string; used for debugging\n */\nlet string_of_state = (state: scanState) : string => {\n  switch (state) {\n  | Scan => \"Scan\"\n  | OpenParen => \"OpenParen\"\n  | PossibleComment => \"PossibleComment\"\n  | PossibleDocComment => \"PossibleDocComment\"\n  | InComment => \"InComment\"\n  | InDocComment => \"InDocComment\"\n  | SimplePre => \"SimplePre\"\n  | PossibleMultiLine => \"PossibleMultiLine\"\n  | MultiLine => \"MultiLine\"\n  | PossibleEndMultiLine => \"PossibleEndMultiLine\"\n  | PossibleEndComment => \"PossibleEndComment\"\n  }\n};\n  \n\n/*\n * Utility functions to keep status updated without having to repeat\n * all the fields. (Have you noticed that I like utility functions?)\n */\nlet emit = (ch: string, newState: scanState, status: statusType) : statusType => {\n  {state: newState, prevState: status.state, position: status.position + 1,\n    toConvert: status.toConvert, finalString: status.finalString ++ ch, inStr: status.inStr}\n};\n\nlet collect = (ch: string, newState: scanState, status: statusType) : statusType => {\n  {state: newState, prevState: status.state, position: status.position + 1,\n    toConvert: status.toConvert ++ ch, finalString: status.finalString, inStr: status.inStr}\n};\n\n/*\n * Here is where all the work is done, going through the input string\n * one character at a time and keeping track of state\n */\nlet rec convert = (status: statusType) : string => {\n  if (status.position == Js.String.length(status.inStr)) {\n    status.finalString;\n  } else {\n    let ch = Js.String.get(status.inStr, status.position);\n    /* Js.log(\"Current character: \" ++ ch ++ \" state: \" ++ string_of_state(status.state)); */\n    switch (status.state, ch) {\n      | (Scan, \"(\") => convert(emit(\"(\",  OpenParen, status))\n      | (Scan, _) => convert(emit(ch, Scan, status))\n      | (OpenParen, \"*\") => convert(emit(\"*\", PossibleDocComment, status))\n      | (OpenParen, _) => convert(emit(ch, Scan, status))\n      | (PossibleDocComment, \"*\") => convert(emit(ch, InDocComment, status))\n      | (PossibleDocComment, _) => convert(emit(ch, InComment, status))\n      | (PossibleComment, _) => convert(emit(ch, InComment, status))\n      | (InComment, \"*\") => convert(emit(ch, PossibleEndComment, status))\n      | (InComment, _) => convert(emit(ch, InComment, status))\n      | (PossibleEndComment, \")\") => convert(emit(ch, Scan, status))\n      | (PossibleEndComment, _) => convert(emit(ch, status.prevState, status))\n      | (InDocComment, \"*\") => convert(emit(ch, PossibleEndComment, status))\n      | (InDocComment, \"[\") => convert(emit(ch, SimplePre, {...status, toConvert: \"\"}))\n      | (InDocComment, \"{\") => convert(emit(ch, PossibleMultiLine, status))\n      | (InDocComment, _) => convert(emit(ch, InDocComment, status))\n      | (PossibleMultiLine, \"[\") => convert(emit(ch, MultiLine, status))\n      | (PossibleMultiLine, _) => convert(emit(ch, InDocComment, status))\n      | (SimplePre, \"]\") => convert({\n          state: InDocComment,\n          prevState: status.state,\n          inStr: status.inStr,\n          toConvert: \"\",\n          finalString: status.finalString ++ Utils.singleLineToRE(Utils.Implementation, status.toConvert) ++ \"]\",\n          position: status.position + 1})\n      | (SimplePre, _) => convert(collect(ch, SimplePre, status))\n      | (MultiLine, \"]\") => convert(collect(\"\", PossibleEndMultiLine, status))\n      | (MultiLine, _) => convert(collect(ch, MultiLine, status))\n      | (PossibleEndMultiLine, \"}\") => convert({\n          state: InDocComment,\n          prevState: status.state,\n          inStr: status.inStr,\n          toConvert: \"\",\n          finalString: status.finalString ++ Utils.multiLineToRE(Utils.Implementation, status.toConvert) ++ \"]}\",\n          position: status.position + 1})\n      | (PossibleEndMultiLine, _) => {\n          convert(collect(\"]\" ++ ch, MultiLine, status))\n        }\n    }\n  }\n};\n"}}}
📣 📣 NEW BSB PACKAGE 📣 📣
- location: /home/david/reasonlab/mli_to_markdown
- bsPlatform: /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform
- buildSystem: bsb version 5.0.0-dev.4
- build command: /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsb.exe -make-world
>> Build system running: /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsb.exe -make-world
>>> stdout
ninja: no work to do.
[1/2] [34mBuilding[39m [2msrc/MliToMarkdown.mlast[22m
File "/home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", line 69, characters 36-37:
Error: Syntax error: ')' expected
File "/home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", line 69, characters 23-24:
Error: This '(' might be unmatched
File "/home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", line 1:
Error: Error while running external preprocessor
Command line: /home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/refmt.exe --print binary '/home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re' > /tmp/ocamlpp739b3d

>>> stderr
[31mninja: error: [0mrebuilding 'build.ninja': subcommand failed
Affected files: file:///home/david/reasonlab/mli_to_markdown//home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re file:///home/david/reasonlab/mli_to_markdown//home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re file:///home/david/reasonlab/mli_to_markdown//home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/bsconfig.json", "diagnostics": []}}
Deps bs-refmt
Dep loc /home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/bsconfig.json
Compiled base: /home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs
Source directories: /home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/src
Source files found: /home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/src/Refmt.re : /home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/src/Refmt.rei
Adding intf /home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/src/Refmt.rei
Bad source file (extension) /home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/src/Refmt.rei
Got source directories ./src - ./src/node_modules - ./src/node_modules/.lsp
Source directories: /home/david/reasonlab/mli_to_markdown/src - /home/david/reasonlab/mli_to_markdown/src/node_modules - /home/david/reasonlab/mli_to_markdown/src/node_modules/.lsp
Source files found: /home/david/reasonlab/mli_to_markdown/src/MliCommentParser.re : /home/david/reasonlab/mli_to_markdown/src/Utils.re : /home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
adding namespace Doc_convert : Doc_convert : /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt
-- All local modules found: 4
Doc_convert
impl /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt
MliCommentParser-Doc_convert
impl /home/david/reasonlab/mli_to_markdown/lib/bs/src/MliCommentParser-Docconvert.cmt
Utils-Doc_convert
impl /home/david/reasonlab/mli_to_markdown/lib/bs/src/Utils-Docconvert.cmt
MliToMarkdown-Doc_convert
impl /home/david/reasonlab/mli_to_markdown/lib/bs/src/MliToMarkdown-Docconvert.cmt
############ Namespaced as Doc_convert at /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt
Dependency dirs /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml /home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown//home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliCommentParser.re"},"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliCommentParser-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
<< Replacing lastDefinitions for file:///home/david/reasonlab/mli_to_markdown/src/MliCommentParser.re
Sending response {"id": 1, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliCommentParser.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 2, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 35, "character": 4}, "end": {"line": 35, "character": 19}}, "command": {"title": "scanState => string", "command": ""}}, {"range": {"start": {"line": 56, "character": 4}, "end": {"line": 56, "character": 8}}, "command": {"title": "(\n  string,\n  scanState,\n  statusType\n) => statusType", "command": ""}}, {"range": {"start": {"line": 61, "character": 4}, "end": {"line": 61, "character": 11}}, "command": {"title": "(\n  string,\n  scanState,\n  statusType\n) => statusType", "command": ""}}, {"range": {"start": {"line": 70, "character": 8}, "end": {"line": 70, "character": 15}}, "command": {"title": "statusType => string", "command": ""}}]}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliCommentParser.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliCommentParser.re", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","languageId":"reason","version":1,"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array[string]): string => {\n    let preExample = Js.Nullable.isNullable(items[1]) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0381469726562ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Sending response {"id": 3, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 4, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to get compilation data", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":44,"character":55},"end":{"line":44,"character":55}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 5, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 68, "character": 36}, "end": {"line": 68, "character": 37}}, "message": "Error: Syntax error: ')' expected", "severity": 1}, {"range": {"start": {"line": 68, "character": 23}, "end": {"line": 68, "character": 24}}, "message": "Error: This '(' might be unmatched", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":44,"character":55},"end":{"line":44,"character":55}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 6, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":65,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 7, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Sending response {"id": 8, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 9, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":68,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 10, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":2},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Nullable.isNullable(items[1]) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
<< Making lastDefinitions with type error for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending response {"id": 11, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
type error here [1mFile "[1m", line 70, characters 44-52[0m[0m:
[1;31mError[0m: This expression has type string but an expression was expected of type
         Js.Nullable.t('a) = Js.nullable('a)
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 44}, "end": {"line": 69, "character": 52}}, "message": "Error: This expression has type string but an expression was expected of type\n         Js.Nullable.t('a) = Js.nullable('a)", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":44,"character":55},"end":{"line":44,"character":55}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 12, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":68,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 13, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Trying for declared Value 1042 in file file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending response {"id": 14, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 69, "character": 44}, "end": {"line": 69, "character": 49}}, "contents": {"kind": "markdown", "value": "```\narray(string)\n```"}}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":65,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 15, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 65, "character": 31}, "end": {"line": 65, "character": 50}}, "contents": {"kind": "markdown", "value": "string"}}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":68,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.0228881835938ms
Sending response {"id": 16, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Trying for declared Value 1042 in file file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending response {"id": 17, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 69, "character": 44}, "end": {"line": 69, "character": 49}}, "contents": {"kind": "markdown", "value": "```\narray(string)\n```"}}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 18, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":71,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 19, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.0350475311279ms
Sending response {"id": 20, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 69, "character": 50}, "end": {"line": 69, "character": 51}}, "contents": {"kind": "markdown", "value": "int"}}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":49}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Trying for declared Value 1042 in file file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending response {"id": 21, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 69, "character": 44}, "end": {"line": 69, "character": 49}}, "contents": {"kind": "markdown", "value": "```\narray(string)\n```"}}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 22, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.mli
Sending response {"id": 23, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 69, "character": 24}, "end": {"line": 69, "character": 32}}, "contents": {"kind": "markdown", "value": "```\nmodule Js_null_undefined = {\n  type t('a) = Js.null_undefined('a)\n  let return: 'a => t('a);\n  let test: t('a) => bool;\n  let isNullable: t('a) => bool;\n  let null: t('a);\n  let undefined: t('a);\n  let bind: (\n  t('a),\n  Js.Internal.fn(\n    [ `Arity_1 of 'a ],\n    'b\n  )\n) => t('b);\n  let iter: (\n  t('a),\n  Js.Internal.fn(\n    [ `Arity_1 of 'a0 ],\n    unit\n  )\n) => unit;\n  let fromOption: option('a) => t('a);\n  let from_opt: option('a) => t('a);\n  let toOption: t('a) => option('a);\n  let to_opt: t('a) => option('a);\n}\n```"}}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.mli
Sending response {"id": 24, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 69, "character": 24}, "end": {"line": 69, "character": 32}}, "contents": {"kind": "markdown", "value": "```\nmodule Js_null_undefined = {\n  type t('a) = Js.null_undefined('a)\n  let return: 'a => t('a);\n  let test: t('a) => bool;\n  let isNullable: t('a) => bool;\n  let null: t('a);\n  let undefined: t('a);\n  let bind: (\n  t('a),\n  Js.Internal.fn(\n    [ `Arity_1 of 'a ],\n    'b\n  )\n) => t('b);\n  let iter: (\n  t('a),\n  Js.Internal.fn(\n    [ `Arity_1 of 'a0 ],\n    unit\n  )\n) => unit;\n  let fromOption: option('a) => t('a);\n  let from_opt: option('a) => t('a);\n  let toOption: t('a) => option('a);\n  let to_opt: t('a) => option('a);\n}\n```"}}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Got a loc for pos
Sending response {"id": 25, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 69, "character": 24}, "end": {"line": 69, "character": 32}}, "kind": 2}]}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":24},"end":{"line":69,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0221729278564ms
Sending response {"id": 26, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":3},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.T(items[1]) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 27, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":25},"end":{"line":69,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 28, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
type error here [1mFile "[1m", line 70, characters 21-25[0m[0m:
[1;31mError[0m: Unbound constructor Js.T
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 21}, "end": {"line": 69, "character": 25}}, "message": "Error: Unbound constructor Js.T", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":8},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.(items[1]) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":30},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Opens folkz > 0 
Package opens Pervasives Doc_convert Docconvert
Package opens Pervasives Doc_convert Docconvert
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
FINDING /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt src 
⚠️ cannot get docs for nonexistant cmt /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt
No path for module Docconvert
Opens nows 1 file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Completing for Js<.>Types<.>
normal Js.Types.
Looking for env in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Getting module Js
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
got it
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
Got the env
 - Completing in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
 -- not capitalized
Sending response {"id": 29, "jsonrpc": "2.0", "result": [{"label": "Undefined", "kind": 4, "detail": "Undefined\nt(undefined_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Null", "kind": 4, "detail": "Null\nt(null_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Boolean", "kind": 4, "detail": "Boolean\nt(bool)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Number", "kind": 4, "detail": "Number\nt(float)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "String", "kind": 4, "detail": "String\nt(string)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Function", "kind": 4, "detail": "Function\nt(function_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Object", "kind": 4, "detail": "Object\nt(obj_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Symbol", "kind": 4, "detail": "Symbol\nt(symbol)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSFalse", "kind": 4, "detail": "JSFalse\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSTrue", "kind": 4, "detail": "JSTrue\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSNull", "kind": 4, "detail": "JSNull\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSUndefined", "kind": 4, "detail": "JSUndefined\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSNumber", "kind": 4, "detail": "JSNumber(float)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSString", "kind": 4, "detail": "JSString(string)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSFunction", "kind": 4, "detail": "JSFunction(function_val)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSObject", "kind": 4, "detail": "JSObject(obj_val)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSSymbol", "kind": 4, "detail": "JSSymbol(symbol)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "test", "kind": 12, "detail": "('a, t('b)) => bool", "documentation": "```ml\ntest \"x\" String = true\n```\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:49"}, {"label": "classify", "kind": 12, "detail": "'a => tagged_t", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:67"}, {"label": "symbol", "kind": 22, "detail": "type symbol", "documentation": "Js symbol type only available in ES6\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:28"}, {"label": "null_val", "kind": 22, "detail": "type null_val", "documentation": "This type has only one value `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:34"}, {"label": "function_val", "kind": 22, "detail": "type function_val", "documentation": "This type has only one value `null`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:36"}, {"label": "obj_val", "kind": 22, "detail": "type obj_val", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:31"}, {"label": "t", "kind": 22, "detail": "type t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:38"}, {"label": "undefined_val", "kind": 22, "detail": "type undefined_val", "documentation": "This type has only one value `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:32"}, {"label": "tagged_t", "kind": 22, "detail": "type tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:55"}]}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
type error here [1mFile "[1m", line 70, characters 41-42[0m[0m:
[1;31mError[0m: This pattern matches values of type bool
       but a pattern was expected which matches values of type string
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 41}, "end": {"line": 69, "character": 42}}, "message": "Error: This pattern matches values of type bool\n       but a pattern was expected which matches values of type string", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":10},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.te(items[1]) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"completionItem/resolve","params":{"label":"test","detail":"('a, t('b)) => bool","documentation":"```ml\ntest \"x\" String = true\n```\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:49","insertTextFormat":1,"kind":12}}
[server] Got a method completionItem/resolve
[server] processing took 0.0109672546387ms
Sending response {"id": 30, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0112056732178ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 31, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":32},"end":{"line":69,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 32, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":32},"end":{"line":69,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 33, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
type error here [1mFile "[1m", line 70, characters 21-32[0m[0m:
[1;31mError[0m: Unbound value Js.Types.te
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 21}, "end": {"line": 69, "character": 32}}, "message": "Error: Unbound value Js.Types.te", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":32}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":12},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1]) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 34, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":34},"end":{"line":69,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 35, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
type error here [1mFile "[1m", line 70, characters 45-46[0m[0m:
[1;31mError[0m: This pattern matches values of type bool
       but a pattern was expected which matches values of type
         Js.Types.t('a) => bool
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 45}, "end": {"line": 69, "character": 46}}, "message": "Error: This pattern matches values of type bool\n       but a pattern was expected which matches values of type\n         Js.Types.t('a) => bool", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":34},"end":{"line":69,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 36, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0238418579102ms
Sending response {"id": 37, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 38, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 39, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0240802764893ms
Sending response {"id": 40, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":43},"end":{"line":69,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 41, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 42, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":14},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], ) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 43, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":45},"end":{"line":69,"character":45}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":45},"end":{"line":69,"character":46}},"message":"Error: This pattern matches values of type bool\n       but a pattern was expected which matches values of type\n         Js.Types.t('a) => bool","severity":1}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 44, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
type error here [1mFile "[1m", line 70, characters 47-48[0m[0m:
[1;31mError[0m: This pattern matches values of type bool
       but a pattern was expected which matches values of type
         Js.Types.t('a) => bool
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 47}, "end": {"line": 69, "character": 48}}, "message": "Error: This pattern matches values of type bool\n       but a pattern was expected which matches values of type\n         Js.Types.t('a) => bool", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":45},"end":{"line":69,"character":45}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 45, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":15},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], J) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 46, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":46},"end":{"line":69,"character":46}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 47, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":17},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":48},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0112056732178ms
Opens folkz > 0 
Package opens Pervasives Doc_convert Docconvert
Package opens Pervasives Doc_convert Docconvert
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
FINDING /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt src 
⚠️ cannot get docs for nonexistant cmt /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt
No path for module Docconvert
Opens nows 1 file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Completing for Js<.>
normal Js.
Looking for env in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Getting module Js
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
got it
Got the env
 - Completing in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
 -- not capitalized
Sending response {"id": 48, "jsonrpc": "2.0", "result": [{"label": "Date", "kind": 9, "detail": "module", "documentation": "Provide bindings for JS Date\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:244"}, {"label": "Re", "kind": 9, "detail": "module", "documentation": "Provide bindings to Js regex expression\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:232"}, {"label": "Vector", "kind": 9, "detail": "module", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:284"}, {"label": "Math", "kind": 9, "detail": "module", "documentation": "Provide bindings for JS `Math` object\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:256"}, {"label": "Promise", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS promise\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:238"}, {"label": "Array", "kind": 9, "detail": "module", "documentation": "Provide bindings to Js array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:220"}, {"label": "Null", "kind": 9, "detail": "module", "documentation": "Provide utilities around `'a null`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:205"}, {"label": "Int", "kind": 9, "detail": "module", "documentation": "Provide utilities for JS float\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:272"}, {"label": "Option", "kind": 9, "detail": "module", "documentation": "Provide utilities for option\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:275"}, {"label": "Promise2", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS promise\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:241"}, {"label": "Nullable", "kind": 9, "detail": "module", "documentation": "Provide utilities around null_undefined\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:211"}, {"label": "Json", "kind": 9, "detail": "module", "documentation": "Provide utilities for json\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:253"}, {"label": "Re2", "kind": 9, "detail": "module", "documentation": "Provide bindings to Js regex expression\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:235"}, {"label": "String", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS string\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:226"}, {"label": "Array2", "kind": 9, "detail": "module", "documentation": "Provide bindings to Js array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:223"}, {"label": "Null_undefined", "kind": 9, "detail": "module", "documentation": "Deprecated: please use Nullable\n\n\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:214"}, {"label": "MapperRt", "kind": 9, "detail": "module", "documentation": "/\\*\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:58"}, {"label": "Obj", "kind": 9, "detail": "module", "documentation": "Provide utilities for t\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:259"}, {"label": "Undefined", "kind": 9, "detail": "module", "documentation": "Provide utilities around undefined\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:208"}, {"label": "Float", "kind": 9, "detail": "module", "documentation": "Provide utilities for manipulating JS types\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:270"}, {"label": "Types", "kind": 9, "detail": "module", "documentation": "Provide utilities for manipulating JS types\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:268"}, {"label": "Console", "kind": 9, "detail": "module", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:286"}, {"label": "List", "kind": 9, "detail": "module", "documentation": "Provide utilities for list\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:281"}, {"label": "Result", "kind": 9, "detail": "module", "documentation": "Define the interface for result\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:278"}, {"label": "TypedArray2", "kind": 9, "detail": "module", "documentation": "Provide bindings for JS typed array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:265"}, {"label": "Global", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS global functions in global namespace\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:250"}, {"label": "Exn", "kind": 9, "detail": "module", "documentation": "Provide utilities for dealing with Js exceptions\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:217"}, {"label": "Typed_array", "kind": 9, "detail": "module", "documentation": "Provide bindings for JS typed array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:262"}, {"label": "Dict", "kind": 9, "detail": "module", "documentation": "Provide utilities for JS dictionary object\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:247"}, {"label": "Internal", "kind": 9, "detail": "module", "documentation": "/\\*\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:59"}, {"label": "String2", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS string\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:229"}, {"label": "eqNullable", "kind": 12, "detail": "('a, nullable('a)) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:175"}, {"label": "undefinedToOption", "kind": 12, "detail": "undefined('a) => option('a)", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:132"}, {"label": "unsafe_gt", "kind": 12, "detail": "('a, 'a) => bool", "documentation": "`unsafe_gt a b` will be compiled as `a > b`. See also unsafe_lt\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:192"}, {"label": "eqNull", "kind": 12, "detail": "('a, null('a)) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:173"}, {"label": "unsafe_ge", "kind": 12, "detail": "('a, 'a) => bool", "documentation": "`unsafe_ge a b` will be compiled as `a >= b`. See also unsafe_lt\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:197"}, {"label": "log3", "kind": 12, "detail": "('a, 'b, 'c) => unit", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:164"}, {"label": "log", "kind": 12, "detail": "'a => unit", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:160"}, {"label": "unsafe_lt", "kind": 12, "detail": "('a, 'a) => bool", "documentation": "`unsafe_lt a b` will be compiled as `a < b`. It is marked as unsafe, since it is impossible to give a proper semantics for comparision which applies to any type\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:179"}, {"label": "log4", "kind": 12, "detail": "('a, 'b, 'c, 'd) => unit", "documentation": "A convenience function to log everything\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:166"}, {"label": "testAny", "kind": 12, "detail": "'a => bool", "documentation": "The same as test except that it is more permissive on the types of input\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:139"}, {"label": "unsafe_le", "kind": 12, "detail": "('a, 'a) => bool", "documentation": "`unsafe_le a b` will be compiled as `a <= b`. See also unsafe_lt\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:186"}, {"label": "eqUndefined", "kind": 12, "detail": "('a, undefined('a)) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:174"}, {"label": "toOption", "kind": 12, "detail": "nullable('a) => option('a)", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:131"}, {"label": "logMany", "kind": 12, "detail": "array('a) => unit", "documentation": "A convenience function to log more than 4 arguments\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:169"}, {"label": "log2", "kind": 12, "detail": "('a, 'b) => unit", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:162"}, {"label": "isNullable", "kind": 12, "detail": "nullable('a) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:136"}, {"label": "test", "kind": 12, "detail": "nullable('a) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:134"}, {"label": "null", "kind": 12, "detail": "null('a)", "documentation": "The same as `empty` in Null will be compiled as `null`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:147"}, {"label": "typeof", "kind": 12, "detail": "'a => string", "documentation": "`typeof x` will be compiled as `typeof x` in JS Please consider functions in Types for a type safe way of reflection\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:155"}, {"label": "undefined", "kind": 12, "detail": "undefined('a)", "documentation": "The same as `empty` Undefined will be compiled as `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:150"}, {"label": "nullToOption", "kind": 12, "detail": "null('a) => option('a)", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:133"}, {"label": "promise", "kind": 22, "detail": "type promise('a, 'e)", "documentation": "The promise type, defined here for interoperation across packages\n\nDeprecated: please use Promise\n\n\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:142"}, {"label": "null_undefined", "kind": 22, "detail": "type null_undefined('a) = nullable('a)", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:129"}, {"label": "nullable", "kind": 22, "detail": "type nullable('a)", "documentation": "value of this type can be `undefined`, `null` or `'a` this type is the same as type `t` n Null_undefined\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:125"}, {"label": "t", "kind": 22, "detail": "type t('a)", "documentation": "Js object type.\n\n```ml\nlet x : < x : int ; y : int > Js.t =\n    [%obj{ x = 1 ; y = 2}]\n```\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:46"}, {"label": "null", "kind": 22, "detail": "type null('a)", "documentation": "nullable, value of this type can be either `null` or `'a` this type is the same as type `t` in Null\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:116"}, {"label": "undefined", "kind": 22, "detail": "type undefined('a)", "documentation": "value of this type can be either `undefined` or `'a` this type is the same as type `t` in Undefined\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:121"}]}
Read message 
{"jsonrpc":"2.0","id":49,"method":"completionItem/resolve","params":{"label":"Array","detail":"module","documentation":"Provide bindings to Js array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:220","insertTextFormat":1,"kind":9}}
[server] Got a method completionItem/resolve
[server] processing took 0.0271797180176ms
Sending response {"id": 49, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0181198120117ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Sending response {"id": 50, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":48},"end":{"line":69,"character":48}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":47},"end":{"line":69,"character":48}},"message":"Error: This pattern matches values of type bool\n       but a pattern was expected which matches values of type\n         Js.Types.t('a) => bool","severity":1}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 51, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":18},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.T) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"completionItem/resolve","params":{"label":"TypedArray2","detail":"module","documentation":"Provide bindings for JS typed array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:265","insertTextFormat":1,"kind":9}}
[server] Got a method completionItem/resolve
[server] processing took 0.00596046447754ms
Sending response {"id": 52, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":52}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":19},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Ty) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"completionItem/resolve","params":{"label":"TypedArray2","detail":"module","documentation":"Provide bindings for JS typed array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:265","insertTextFormat":1,"kind":9}}
[server] Got a method completionItem/resolve
[server] processing took 0.00715255737305ms
Sending response {"id": 53, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":22},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":54,"method":"completionItem/resolve","params":{"label":"Types","detail":"module","documentation":"Provide utilities for manipulating JS types\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:268","insertTextFormat":1,"kind":9}}
[server] Got a method completionItem/resolve
[server] processing took 0.00405311584473ms
Sending response {"id": 54, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":23},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":54},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Opens folkz > 0 
Package opens Pervasives Doc_convert Docconvert
Package opens Pervasives Doc_convert Docconvert
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
FINDING /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt src 
⚠️ cannot get docs for nonexistant cmt /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt
No path for module Docconvert
Opens nows 1 file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Completing for Js<.>Types<.>
normal Js.Types.
Looking for env in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Getting module Js
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
got it
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
Got the env
 - Completing in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
 -- not capitalized
Sending response {"id": 55, "jsonrpc": "2.0", "result": [{"label": "Undefined", "kind": 4, "detail": "Undefined\nt(undefined_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Null", "kind": 4, "detail": "Null\nt(null_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Boolean", "kind": 4, "detail": "Boolean\nt(bool)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Number", "kind": 4, "detail": "Number\nt(float)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "String", "kind": 4, "detail": "String\nt(string)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Function", "kind": 4, "detail": "Function\nt(function_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Object", "kind": 4, "detail": "Object\nt(obj_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Symbol", "kind": 4, "detail": "Symbol\nt(symbol)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSFalse", "kind": 4, "detail": "JSFalse\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSTrue", "kind": 4, "detail": "JSTrue\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSNull", "kind": 4, "detail": "JSNull\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSUndefined", "kind": 4, "detail": "JSUndefined\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSNumber", "kind": 4, "detail": "JSNumber(float)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSString", "kind": 4, "detail": "JSString(string)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSFunction", "kind": 4, "detail": "JSFunction(function_val)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSObject", "kind": 4, "detail": "JSObject(obj_val)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSSymbol", "kind": 4, "detail": "JSSymbol(symbol)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "test", "kind": 12, "detail": "('a, t('b)) => bool", "documentation": "```ml\ntest \"x\" String = true\n```\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:49"}, {"label": "classify", "kind": 12, "detail": "'a => tagged_t", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:67"}, {"label": "symbol", "kind": 22, "detail": "type symbol", "documentation": "Js symbol type only available in ES6\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:28"}, {"label": "null_val", "kind": 22, "detail": "type null_val", "documentation": "This type has only one value `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:34"}, {"label": "function_val", "kind": 22, "detail": "type function_val", "documentation": "This type has only one value `null`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:36"}, {"label": "obj_val", "kind": 22, "detail": "type obj_val", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:31"}, {"label": "t", "kind": 22, "detail": "type t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:38"}, {"label": "undefined_val", "kind": 22, "detail": "type undefined_val", "documentation": "This type has only one value `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:32"}, {"label": "tagged_t", "kind": 22, "detail": "type tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:55"}]}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Sending response {"id": 56, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":54},"end":{"line":69,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 57, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":58,"method":"completionItem/resolve","params":{"label":"Boolean","detail":"Boolean\nt(bool)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n","documentation":"No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1","insertTextFormat":1,"kind":4}}
[server] Got a method completionItem/resolve
[server] processing took 0.00286102294922ms
Sending response {"id": 58, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 4}, "end": {"line": 69, "character": 34}}, "message": "Error: SyntaxError in block", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":58}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":24},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.S) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"completionItem/resolve","params":{"label":"String","detail":"String\nt(string)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n","documentation":"No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1","insertTextFormat":1,"kind":4}}
[server] Got a method completionItem/resolve
[server] processing took 0.00596046447754ms
Sending response {"id": 59, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 60, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":55},"end":{"line":69,"character":55}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 61, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
type error here [1mFile "[1m", line 70, characters 45-55[0m[0m:
[1;31mError[0m: Unbound constructor Js.Types.S
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 45}, "end": {"line": 69, "character": 55}}, "message": "Error: Unbound constructor Js.Types.S", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":29},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? \"\" : replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 62, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":60},"end":{"line":69,"character":60}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 63, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
type error here [1mFile "[1m", line 71, characters 45-53[0m[0m:
[1;31mError[0m: This expression has type string but an expression was expected of type
         Js.Nullable.t('a) = Js.nullable('a)
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 70, "character": 45}, "end": {"line": 70, "character": 53}}, "message": "Error: This expression has type string but an expression was expected of type\n         Js.Nullable.t('a) = Js.nullable('a)", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":60},"end":{"line":69,"character":60}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 64, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
Getting global Js
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
Getting for 1013 in t
Yes!! got it
Sending response {"id": 65, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 69, "character": 54}, "end": {"line": 69, "character": 60}}, "contents": {"kind": "markdown", "value": "```\nJs.Types.t(string)\n```\n\n```\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n\n```\n\n```\nString()\n```"}}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":64}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 66, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 69, "character": 63}, "end": {"line": 69, "character": 68}}, "contents": {"kind": "markdown", "value": "```\nbool\n```"}}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":64},"end":{"line":69,"character":69}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 3.12805175781ms
Sending response {"id": 67, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":30},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]);\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Sending response {"id": 68, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":64},"end":{"line":69,"character":64}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 69, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 4}, "end": {"line": 69, "character": 61}}, "message": "Error: SyntaxError in block", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":90}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 70, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":64},"end":{"line":69,"character":64}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 71, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":92}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 72, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":92}}}
[server] Got a method textDocument/hover
[server] processing took 0.0221729278564ms
Sending response {"id": 73, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":93},"end":{"line":69,"character":93}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 74, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":31},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) ;\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Sending response {"id": 75, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":94},"end":{"line":69,"character":94}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 76, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":33},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : ;\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":35},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Nullable.isNullable(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 77, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":98},"end":{"line":69,"character":98}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 78, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
type error here [1mFile "[1m", line 71, characters 45-53[0m[0m:
[1;31mError[0m: This expression has type string but an expression was expected of type
         Js.Nullable.t('a) = Js.nullable('a)
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 70, "character": 45}, "end": {"line": 70, "character": 53}}, "message": "Error: This expression has type string but an expression was expected of type\n         Js.Nullable.t('a) = Js.nullable('a)", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":69,"character":98},"end":{"line":69,"character":98}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 79, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0290870666504ms
Getting global Js
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.mli
Getting for 1011 in isNullable
Trying for declared Value 1011 in file file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.mli
Yes!! got it
Sending response {"id": 80, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 70, "character": 34}, "end": {"line": 70, "character": 44}}, "contents": {"kind": "markdown", "value": "```\nJs.Nullable.t('a) => bool\n```\n\nReturns `true` if the given value is `null` or `undefined`, `false` otherwise\n\n"}}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
Sending response {"id": 81, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 70, "character": 22}, "end": {"line": 70, "character": 24}}, "contents": {"kind": "markdown", "value": "```\nmodule Js = {\n  type t('a)\n  module MapperRt;\n  module Internal;\n  type null('a)\n  type undefined('a)\n  type nullable('a)\n  type null_undefined('a) = nullable('a)\n  let toOption: nullable('a) => option('a);\n  let undefinedToOption: undefined('a) => option('a);\n  let nullToOption: null('a) => option('a);\n  let test: nullable('a) => bool;\n  let isNullable: nullable('a) => bool;\n  let testAny: 'a => bool;\n  type promise('a, 'e)\n  let null: null('a);\n  let undefined: undefined('a);\n  let typeof: 'a => string;\n  let log: 'a => unit;\n  let log2: ('a, 'b) => unit;\n  let log3: ('a, 'b, 'c) => unit;\n  let log4: ('a, 'b, 'c, 'd) => unit;\n  let logMany: array('a) => unit;\n  let eqNull: ('a, null('a)) => bool;\n  let eqUndefined: ('a, undefined('a)) => bool;\n  let eqNullable: ('a, nullable('a)) => bool;\n  let unsafe_lt: ('a, 'a) => bool;\n  let unsafe_le: ('a, 'a) => bool;\n  let unsafe_gt: ('a, 'a) => bool;\n  let unsafe_ge: ('a, 'a) => bool;\n  module Null;\n  module Undefined;\n  module Nullable;\n  module Null_undefined;\n  module Exn;\n  module Array;\n  module Array2;\n  module String;\n  module String2;\n  module Re;\n  module Re2;\n  module Promise;\n  module Promise2;\n  module Date;\n  module Dict;\n  module Global;\n  module Json;\n  module Math;\n  module Obj;\n  module Typed_array;\n  module TypedArray2;\n  module Types;\n  module Float;\n  module Int;\n  module Option;\n  module Result;\n  module List;\n  module Vector;\n  module Console;\n}\n```"}}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Getting global Js
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.mli
Getting for 1011 in isNullable
Trying for declared Value 1011 in file file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.mli
Yes!! got it
Sending response {"id": 82, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 70, "character": 34}, "end": {"line": 70, "character": 44}}, "contents": {"kind": "markdown", "value": "```\nJs.Nullable.t('a) => bool\n```\n\nReturns `true` if the given value is `null` or `undefined`, `false` otherwise\n\n"}}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
Sending response {"id": 83, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 70, "character": 22}, "end": {"line": 70, "character": 24}}, "contents": {"kind": "markdown", "value": "```\nmodule Js = {\n  type t('a)\n  module MapperRt;\n  module Internal;\n  type null('a)\n  type undefined('a)\n  type nullable('a)\n  type null_undefined('a) = nullable('a)\n  let toOption: nullable('a) => option('a);\n  let undefinedToOption: undefined('a) => option('a);\n  let nullToOption: null('a) => option('a);\n  let test: nullable('a) => bool;\n  let isNullable: nullable('a) => bool;\n  let testAny: 'a => bool;\n  type promise('a, 'e)\n  let null: null('a);\n  let undefined: undefined('a);\n  let typeof: 'a => string;\n  let log: 'a => unit;\n  let log2: ('a, 'b) => unit;\n  let log3: ('a, 'b, 'c) => unit;\n  let log4: ('a, 'b, 'c, 'd) => unit;\n  let logMany: array('a) => unit;\n  let eqNull: ('a, null('a)) => bool;\n  let eqUndefined: ('a, undefined('a)) => bool;\n  let eqNullable: ('a, nullable('a)) => bool;\n  let unsafe_lt: ('a, 'a) => bool;\n  let unsafe_le: ('a, 'a) => bool;\n  let unsafe_gt: ('a, 'a) => bool;\n  let unsafe_ge: ('a, 'a) => bool;\n  module Null;\n  module Undefined;\n  module Nullable;\n  module Null_undefined;\n  module Exn;\n  module Array;\n  module Array2;\n  module String;\n  module String2;\n  module Re;\n  module Re2;\n  module Promise;\n  module Promise2;\n  module Date;\n  module Dict;\n  module Global;\n  module Json;\n  module Math;\n  module Obj;\n  module Typed_array;\n  module TypedArray2;\n  module Types;\n  module Float;\n  module Int;\n  module Option;\n  module Result;\n  module List;\n  module Vector;\n  module Console;\n}\n```"}}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.mli
Sending response {"id": 84, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 70, "character": 25}, "end": {"line": 70, "character": 33}}, "contents": {"kind": "markdown", "value": "```\nmodule Js_null_undefined = {\n  type t('a) = Js.null_undefined('a)\n  let return: 'a => t('a);\n  let test: t('a) => bool;\n  let isNullable: t('a) => bool;\n  let null: t('a);\n  let undefined: t('a);\n  let bind: (\n  t('a),\n  Js.Internal.fn(\n    [ `Arity_1 of 'a ],\n    'b\n  )\n) => t('b);\n  let iter: (\n  t('a),\n  Js.Internal.fn(\n    [ `Arity_1 of 'a0 ],\n    unit\n  )\n) => unit;\n  let fromOption: option('a) => t('a);\n  let from_opt: option('a) => t('a);\n  let toOption: t('a) => option('a);\n  let to_opt: t('a) => option('a);\n}\n```"}}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_null_undefined.mli
Sending response {"id": 85, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 70, "character": 25}, "end": {"line": 70, "character": 33}}, "contents": {"kind": "markdown", "value": "```\nmodule Js_null_undefined = {\n  type t('a) = Js.null_undefined('a)\n  let return: 'a => t('a);\n  let test: t('a) => bool;\n  let isNullable: t('a) => bool;\n  let null: t('a);\n  let undefined: t('a);\n  let bind: (\n  t('a),\n  Js.Internal.fn(\n    [ `Arity_1 of 'a ],\n    'b\n  )\n) => t('b);\n  let iter: (\n  t('a),\n  Js.Internal.fn(\n    [ `Arity_1 of 'a0 ],\n    unit\n  )\n) => unit;\n  let fromOption: option('a) => t('a);\n  let from_opt: option('a) => t('a);\n  let toOption: t('a) => option('a);\n  let to_opt: t('a) => option('a);\n}\n```"}}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Got a loc for pos
Sending response {"id": 86, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 70, "character": 25}, "end": {"line": 70, "character": 33}}, "kind": 2}]}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":25},"end":{"line":70,"character":45}},"context":{"diagnostics":[{"range":{"start":{"line":70,"character":45},"end":{"line":70,"character":53}},"message":"Error: This expression has type string but an expression was expected of type\n         Js.Nullable.t('a) = Js.nullable('a)","severity":1}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 87, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":25},"end":{"line":70,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 88, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":36},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.T(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 89, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":26},"end":{"line":70,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 90, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":38},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Typ(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 91, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":28},"end":{"line":70,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 92, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":41},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
type error here [1mFile "[1m", line 71, characters 42-43[0m[0m:
[1;31mError[0m: This pattern matches values of type bool
       but a pattern was expected which matches values of type string
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 70, "character": 42}, "end": {"line": 70, "character": 43}}, "message": "Error: This pattern matches values of type bool\n       but a pattern was expected which matches values of type string", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":31},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00810623168945ms
Opens folkz > 0 
Package opens Pervasives Doc_convert Docconvert
Package opens Pervasives Doc_convert Docconvert
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
FINDING /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt src 
⚠️ cannot get docs for nonexistant cmt /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt
No path for module Docconvert
Opens nows 1 file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Completing for Js<.>Types<.>
normal Js.Types.
Looking for env in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Getting module Js
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
got it
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
Got the env
 - Completing in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
 -- not capitalized
Sending response {"id": 93, "jsonrpc": "2.0", "result": [{"label": "Undefined", "kind": 4, "detail": "Undefined\nt(undefined_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Null", "kind": 4, "detail": "Null\nt(null_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Boolean", "kind": 4, "detail": "Boolean\nt(bool)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Number", "kind": 4, "detail": "Number\nt(float)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "String", "kind": 4, "detail": "String\nt(string)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Function", "kind": 4, "detail": "Function\nt(function_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Object", "kind": 4, "detail": "Object\nt(obj_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Symbol", "kind": 4, "detail": "Symbol\nt(symbol)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSFalse", "kind": 4, "detail": "JSFalse\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSTrue", "kind": 4, "detail": "JSTrue\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSNull", "kind": 4, "detail": "JSNull\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSUndefined", "kind": 4, "detail": "JSUndefined\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSNumber", "kind": 4, "detail": "JSNumber(float)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSString", "kind": 4, "detail": "JSString(string)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSFunction", "kind": 4, "detail": "JSFunction(function_val)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSObject", "kind": 4, "detail": "JSObject(obj_val)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSSymbol", "kind": 4, "detail": "JSSymbol(symbol)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "test", "kind": 12, "detail": "('a, t('b)) => bool", "documentation": "```ml\ntest \"x\" String = true\n```\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:49"}, {"label": "classify", "kind": 12, "detail": "'a => tagged_t", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:67"}, {"label": "symbol", "kind": 22, "detail": "type symbol", "documentation": "Js symbol type only available in ES6\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:28"}, {"label": "null_val", "kind": 22, "detail": "type null_val", "documentation": "This type has only one value `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:34"}, {"label": "function_val", "kind": 22, "detail": "type function_val", "documentation": "This type has only one value `null`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:36"}, {"label": "obj_val", "kind": 22, "detail": "type obj_val", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:31"}, {"label": "t", "kind": 22, "detail": "type t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:38"}, {"label": "undefined_val", "kind": 22, "detail": "type undefined_val", "documentation": "This type has only one value `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:32"}, {"label": "tagged_t", "kind": 22, "detail": "type tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:55"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":45},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3]) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"completionItem/resolve","params":{"label":"test","detail":"('a, t('b)) => bool","documentation":"```ml\ntest \"x\" String = true\n```\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:49","insertTextFormat":1,"kind":12}}
[server] Got a method completionItem/resolve
[server] processing took 0.00905990600586ms
Sending response {"id": 94, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 95, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":35},"end":{"line":70,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 96, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
type error here [1mFile "[1m", line 71, characters 46-47[0m[0m:
[1;31mError[0m: This pattern matches values of type bool
       but a pattern was expected which matches values of type
         Js.Types.t('a) => bool
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 70, "character": 46}, "end": {"line": 70, "character": 47}}, "message": "Error: This pattern matches values of type bool\n       but a pattern was expected which matches values of type\n         Js.Types.t('a) => bool", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":35},"end":{"line":70,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 97, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 98, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":44},"end":{"line":70,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0162124633789ms
Sending response {"id": 99, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 100, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":47},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], ) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
Sending response {"id": 101, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":46},"end":{"line":70,"character":46}},"context":{"diagnostics":[{"range":{"start":{"line":70,"character":46},"end":{"line":70,"character":47}},"message":"Error: This pattern matches values of type bool\n       but a pattern was expected which matches values of type\n         Js.Types.t('a) => bool","severity":1}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 102, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":50},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 4}, "end": {"line": 70, "character": 35}}, "message": "Error: SyntaxError in block", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":49},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00715255737305ms
Opens folkz > 0 
Package opens Pervasives Doc_convert Docconvert
Package opens Pervasives Doc_convert Docconvert
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
FINDING /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt src 
⚠️ cannot get docs for nonexistant cmt /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt
No path for module Docconvert
Opens nows 1 file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Completing for Js<.>
normal Js.
Looking for env in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Getting module Js
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
got it
Got the env
 - Completing in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
 -- not capitalized
Sending response {"id": 103, "jsonrpc": "2.0", "result": [{"label": "Date", "kind": 9, "detail": "module", "documentation": "Provide bindings for JS Date\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:244"}, {"label": "Re", "kind": 9, "detail": "module", "documentation": "Provide bindings to Js regex expression\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:232"}, {"label": "Vector", "kind": 9, "detail": "module", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:284"}, {"label": "Math", "kind": 9, "detail": "module", "documentation": "Provide bindings for JS `Math` object\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:256"}, {"label": "Promise", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS promise\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:238"}, {"label": "Array", "kind": 9, "detail": "module", "documentation": "Provide bindings to Js array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:220"}, {"label": "Null", "kind": 9, "detail": "module", "documentation": "Provide utilities around `'a null`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:205"}, {"label": "Int", "kind": 9, "detail": "module", "documentation": "Provide utilities for JS float\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:272"}, {"label": "Option", "kind": 9, "detail": "module", "documentation": "Provide utilities for option\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:275"}, {"label": "Promise2", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS promise\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:241"}, {"label": "Nullable", "kind": 9, "detail": "module", "documentation": "Provide utilities around null_undefined\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:211"}, {"label": "Json", "kind": 9, "detail": "module", "documentation": "Provide utilities for json\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:253"}, {"label": "Re2", "kind": 9, "detail": "module", "documentation": "Provide bindings to Js regex expression\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:235"}, {"label": "String", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS string\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:226"}, {"label": "Array2", "kind": 9, "detail": "module", "documentation": "Provide bindings to Js array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:223"}, {"label": "Null_undefined", "kind": 9, "detail": "module", "documentation": "Deprecated: please use Nullable\n\n\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:214"}, {"label": "MapperRt", "kind": 9, "detail": "module", "documentation": "/\\*\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:58"}, {"label": "Obj", "kind": 9, "detail": "module", "documentation": "Provide utilities for t\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:259"}, {"label": "Undefined", "kind": 9, "detail": "module", "documentation": "Provide utilities around undefined\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:208"}, {"label": "Float", "kind": 9, "detail": "module", "documentation": "Provide utilities for manipulating JS types\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:270"}, {"label": "Types", "kind": 9, "detail": "module", "documentation": "Provide utilities for manipulating JS types\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:268"}, {"label": "Console", "kind": 9, "detail": "module", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:286"}, {"label": "List", "kind": 9, "detail": "module", "documentation": "Provide utilities for list\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:281"}, {"label": "Result", "kind": 9, "detail": "module", "documentation": "Define the interface for result\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:278"}, {"label": "TypedArray2", "kind": 9, "detail": "module", "documentation": "Provide bindings for JS typed array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:265"}, {"label": "Global", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS global functions in global namespace\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:250"}, {"label": "Exn", "kind": 9, "detail": "module", "documentation": "Provide utilities for dealing with Js exceptions\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:217"}, {"label": "Typed_array", "kind": 9, "detail": "module", "documentation": "Provide bindings for JS typed array\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:262"}, {"label": "Dict", "kind": 9, "detail": "module", "documentation": "Provide utilities for JS dictionary object\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:247"}, {"label": "Internal", "kind": 9, "detail": "module", "documentation": "/\\*\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:59"}, {"label": "String2", "kind": 9, "detail": "module", "documentation": "Provide bindings to JS string\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:229"}, {"label": "eqNullable", "kind": 12, "detail": "('a, nullable('a)) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:175"}, {"label": "undefinedToOption", "kind": 12, "detail": "undefined('a) => option('a)", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:132"}, {"label": "unsafe_gt", "kind": 12, "detail": "('a, 'a) => bool", "documentation": "`unsafe_gt a b` will be compiled as `a > b`. See also unsafe_lt\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:192"}, {"label": "eqNull", "kind": 12, "detail": "('a, null('a)) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:173"}, {"label": "unsafe_ge", "kind": 12, "detail": "('a, 'a) => bool", "documentation": "`unsafe_ge a b` will be compiled as `a >= b`. See also unsafe_lt\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:197"}, {"label": "log3", "kind": 12, "detail": "('a, 'b, 'c) => unit", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:164"}, {"label": "log", "kind": 12, "detail": "'a => unit", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:160"}, {"label": "unsafe_lt", "kind": 12, "detail": "('a, 'a) => bool", "documentation": "`unsafe_lt a b` will be compiled as `a < b`. It is marked as unsafe, since it is impossible to give a proper semantics for comparision which applies to any type\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:179"}, {"label": "log4", "kind": 12, "detail": "('a, 'b, 'c, 'd) => unit", "documentation": "A convenience function to log everything\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:166"}, {"label": "testAny", "kind": 12, "detail": "'a => bool", "documentation": "The same as test except that it is more permissive on the types of input\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:139"}, {"label": "unsafe_le", "kind": 12, "detail": "('a, 'a) => bool", "documentation": "`unsafe_le a b` will be compiled as `a <= b`. See also unsafe_lt\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:186"}, {"label": "eqUndefined", "kind": 12, "detail": "('a, undefined('a)) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:174"}, {"label": "toOption", "kind": 12, "detail": "nullable('a) => option('a)", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:131"}, {"label": "logMany", "kind": 12, "detail": "array('a) => unit", "documentation": "A convenience function to log more than 4 arguments\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:169"}, {"label": "log2", "kind": 12, "detail": "('a, 'b) => unit", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:162"}, {"label": "isNullable", "kind": 12, "detail": "nullable('a) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:136"}, {"label": "test", "kind": 12, "detail": "nullable('a) => bool", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:134"}, {"label": "null", "kind": 12, "detail": "null('a)", "documentation": "The same as `empty` in Null will be compiled as `null`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:147"}, {"label": "typeof", "kind": 12, "detail": "'a => string", "documentation": "`typeof x` will be compiled as `typeof x` in JS Please consider functions in Types for a type safe way of reflection\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:155"}, {"label": "undefined", "kind": 12, "detail": "undefined('a)", "documentation": "The same as `empty` Undefined will be compiled as `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:150"}, {"label": "nullToOption", "kind": 12, "detail": "null('a) => option('a)", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:133"}, {"label": "promise", "kind": 22, "detail": "type promise('a, 'e)", "documentation": "The promise type, defined here for interoperation across packages\n\nDeprecated: please use Promise\n\n\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:142"}, {"label": "null_undefined", "kind": 22, "detail": "type null_undefined('a) = nullable('a)", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:129"}, {"label": "nullable", "kind": 22, "detail": "type nullable('a)", "documentation": "value of this type can be `undefined`, `null` or `'a` this type is the same as type `t` n Null_undefined\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:125"}, {"label": "t", "kind": 22, "detail": "type t('a)", "documentation": "Js object type.\n\n```ml\nlet x : < x : int ; y : int > Js.t =\n    [%obj{ x = 1 ; y = 2}]\n```\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:46"}, {"label": "null", "kind": 22, "detail": "type null('a)", "documentation": "nullable, value of this type can be either `null` or `'a` this type is the same as type `t` in Null\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:116"}, {"label": "undefined", "kind": 22, "detail": "type undefined('a)", "documentation": "value of this type can be either `undefined` or `'a` this type is the same as type `t` in Undefined\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml:121"}]}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":103}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":56},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":55},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Opens folkz > 0 
Package opens Pervasives Doc_convert Docconvert
Package opens Pervasives Doc_convert Docconvert
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
FINDING /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt src 
⚠️ cannot get docs for nonexistant cmt /home/david/reasonlab/mli_to_markdown/lib/bs/Doc_convert.cmt
No path for module Docconvert
Opens nows 1 file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Completing for Js<.>Types<.>
normal Js.Types.
Looking for env in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/pervasives.mli
Getting module Js
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.cmt src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js.ml
got it
FINDING /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.cmti src /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
Got the env
 - Completing in file:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli
 -- not capitalized
Sending response {"id": 104, "jsonrpc": "2.0", "result": [{"label": "Undefined", "kind": 4, "detail": "Undefined\nt(undefined_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Null", "kind": 4, "detail": "Null\nt(null_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Boolean", "kind": 4, "detail": "Boolean\nt(bool)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Number", "kind": 4, "detail": "Number\nt(float)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "String", "kind": 4, "detail": "String\nt(string)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Function", "kind": 4, "detail": "Function\nt(function_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Object", "kind": 4, "detail": "Object\nt(obj_val)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "Symbol", "kind": 4, "detail": "Symbol\nt(symbol)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSFalse", "kind": 4, "detail": "JSFalse\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSTrue", "kind": 4, "detail": "JSTrue\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSNull", "kind": 4, "detail": "JSNull\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSUndefined", "kind": 4, "detail": "JSUndefined\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSNumber", "kind": 4, "detail": "JSNumber(float)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSString", "kind": 4, "detail": "JSString(string)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSFunction", "kind": 4, "detail": "JSFunction(function_val)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSObject", "kind": 4, "detail": "JSObject(obj_val)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "JSSymbol", "kind": 4, "detail": "JSSymbol(symbol)\n\ntype tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1"}, {"label": "test", "kind": 12, "detail": "('a, t('b)) => bool", "documentation": "```ml\ntest \"x\" String = true\n```\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:49"}, {"label": "classify", "kind": 12, "detail": "'a => tagged_t", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:67"}, {"label": "symbol", "kind": 22, "detail": "type symbol", "documentation": "Js symbol type only available in ES6\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:28"}, {"label": "null_val", "kind": 22, "detail": "type null_val", "documentation": "This type has only one value `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:34"}, {"label": "function_val", "kind": 22, "detail": "type function_val", "documentation": "This type has only one value `null`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:36"}, {"label": "obj_val", "kind": 22, "detail": "type obj_val", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:31"}, {"label": "t", "kind": 22, "detail": "type t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:38"}, {"label": "undefined_val", "kind": 22, "detail": "type undefined_val", "documentation": "This type has only one value `undefined`\n\n\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:32"}, {"label": "tagged_t", "kind": 22, "detail": "type tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(function_val)\n  | JSObject(obj_val)\n  | JSSymbol(symbol)\n", "documentation": "No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:55"}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":57},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.S) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":58},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.St) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"completionItem/resolve","params":{"label":"String","detail":"String\nt(string)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n","documentation":"No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1","insertTextFormat":1,"kind":4}}
[server] Got a method completionItem/resolve
[server] processing took 0.00500679016113ms
Sending response {"id": 105, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":106,"method":"completionItem/resolve","params":{"label":"String","detail":"String\nt(string)\n\ntype t('_) = \n  | Undefined: t(undefined_val)\n  | Null: t(null_val)\n  | Boolean: t(bool)\n  | Number: t(float)\n  | String: t(string)\n  | Function: t(function_val)\n  | Object: t(obj_val)\n  | Symbol: t(symbol)\n","documentation":"No docs\n\nfile:///home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml/js_types.mli:1","insertTextFormat":1,"kind":4}}
[server] Got a method completionItem/resolve
[server] processing took 0.00596046447754ms
Sending response {"id": 106, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
type error here [1mFile "[1m", line 71, characters 46-57[0m[0m:
[1;31mError[0m: Unbound constructor Js.Types.St
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 70, "character": 46}, "end": {"line": 70, "character": 57}}, "message": "Error: Unbound constructor Js.Types.St", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":62},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.String) ? \"\" : replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
<< Replacing lastDefinitions for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending response {"id": 107, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 11, "character": 8}, "end": {"line": 11, "character": 20}}, "command": {"title": "(\n  string,\n  string,\n  array(string),\n  int\n) => string", "command": ""}}, {"range": {"start": {"line": 116, "character": 4}, "end": {"line": 116, "character": 15}}, "command": {"title": "(string, string) => unit", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":61},"end":{"line":70,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 108, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":61},"end":{"line":70,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0250339508057ms
Sending response {"id": 109, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":69,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 110, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":65}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 111, "jsonrpc": "2.0", "result": {"range": {"start": {"line": 70, "character": 64}, "end": {"line": 70, "character": 69}}, "contents": {"kind": "markdown", "value": "```\nbool\n```"}}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":65},"end":{"line":70,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 112, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":63},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.String) ? replaceCodeBrackets(items[3]);\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Sending response {"id": 113, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 11, "character": 8}, "end": {"line": 11, "character": 20}}, "command": {"title": "(\n  string,\n  string,\n  array(string),\n  int\n) => string", "command": ""}}, {"range": {"start": {"line": 116, "character": 4}, "end": {"line": 116, "character": 15}}, "command": {"title": "(string, string) => unit", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":65},"end":{"line":70,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 114, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 4}, "end": {"line": 70, "character": 62}}, "message": "Error: SyntaxError in block", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":92}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 115, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":65},"end":{"line":70,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 116, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":93}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 117, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":94},"end":{"line":70,"character":94}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0369548797607ms
Sending response {"id": 118, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"position":{"line":70,"character":93}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 119, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":64},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.String) ? replaceCodeBrackets(items[3]) ;\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Sending response {"id": 120, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 11, "character": 8}, "end": {"line": 11, "character": 20}}, "command": {"title": "(\n  string,\n  string,\n  array(string),\n  int\n) => string", "command": ""}}, {"range": {"start": {"line": 116, "character": 4}, "end": {"line": 116, "character": 15}}, "command": {"title": "(string, string) => unit", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":95},"end":{"line":70,"character":95}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 121, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": [{"range": {"start": {"line": 69, "character": 4}, "end": {"line": 70, "character": 62}}, "message": "Error: SyntaxError in block", "severity": 1}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":66},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.String) ? replaceCodeBrackets(items[3]) : ;\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":68},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.String) ? replaceCodeBrackets(items[3]) : \"\";\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
<< Replacing lastDefinitions for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending response {"id": 122, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 11, "character": 8}, "end": {"line": 11, "character": 20}}, "command": {"title": "(\n  string,\n  string,\n  array(string),\n  int\n) => string", "command": ""}}, {"range": {"start": {"line": 116, "character": 4}, "end": {"line": 116, "character": 15}}, "command": {"title": "(string, string) => unit", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":99},"end":{"line":70,"character":99}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 123, "jsonrpc": "2.0", "result": null}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"},"range":{"start":{"line":70,"character":99},"end":{"line":70,"character":99}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 124, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":68},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.String) ? replaceCodeBrackets(items[3]) : \"\";\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(noExamplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\";\n      | None => {\n          let result2 = Js.String.match(examplePattern, comment);\n          switch (result2) {\n            | Some(items) => massageExample(items)\n            | None => \"\"\n          }\n      }\n    };\n      \n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":68}}}
>> Build system running: /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsb.exe -make-world
>>> stdout
ninja: no work to do.
[1/3] [34mBuilding[39m [2mDocconvert.cmi[22m
[2/3] [34mBuilding[39m [2msrc/MliToMarkdown.mlast[22m
[3/3] [34mBuilding[39m [2msrc/MliToMarkdown.mlast.d[22m
[1/1] [34mBuilding[39m [2msrc/MliToMarkdown-Docconvert.cmj[22m
>>> stderr

Affected files: 
Cleaning bsconfig.json
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/bsconfig.json", "diagnostics": []}}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
<< Replacing lastDefinitions for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": []}}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/Utils.re
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/Utils-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
<< Replacing lastDefinitions for file:///home/david/reasonlab/mli_to_markdown/src/Utils.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/Utils.re", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":69},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.String) ? replaceCodeBrackets(items[3]) : \"\";\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(examplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => massageExample(items)\n      | None => {\n          let result2 = Js.String.match(noExamplePattern, comment);\n          switch (result2) {\n            | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\"\n            | None => \"\"\n          }\n      }\n    };\n\n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
<< Replacing lastDefinitions for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending response {"id": 125, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 11, "character": 8}, "end": {"line": 11, "character": 20}}, "command": {"title": "(\n  string,\n  string,\n  array(string),\n  int\n) => string", "command": ""}}, {"range": {"start": {"line": 116, "character": 4}, "end": {"line": 116, "character": 15}}, "command": {"title": "(string, string) => unit", "command": ""}}]}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":70},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.String) ? replaceCodeBrackets(items[3]) : \"\";\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"\\n```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"\\n```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*([^@]+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(examplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => massageExample(items)\n      | None => {\n          let result2 = Js.String.match(noExamplePattern, comment);\n          switch (result2) {\n            | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\"\n            | None => \"\"\n          }\n      }\n    };\n\n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
<< Replacing lastDefinitions for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending response {"id": 126, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 11, "character": 8}, "end": {"line": 11, "character": 20}}, "command": {"title": "(\n  string,\n  string,\n  array(string),\n  int\n) => string", "command": ""}}, {"range": {"start": {"line": 116, "character": 4}, "end": {"line": 116, "character": 15}}, "command": {"title": "(string, string) => unit", "command": ""}}]}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re","version":71},"contentChanges":[{"text":"module Ba = Belt.Array;\n\nlet defnPattern = [%re \"/^(val|external)/\"];\nlet startDocCommentPattern = [%re \"/^\\\\s*\\\\(\\\\*\\\\*/\"];\nlet startCommentPattern = [%re \"/\\\\(\\\\*/\"];\nlet endCommentPattern = [%re \"/\\\\*\\\\)/\"];\n\nlet isCommentStart(s: string): bool {\n  Js.Re.test(s, startDocCommentPattern) && (! Js.Re.test(s, endCommentPattern))\n};\n \nlet rec processLines = (moduleName: string, result: string, lines: array(string), index: int): string => {\n \n  let rec collectDefinition = (acc: string, index: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      if (Js.Re.test(line, defnPattern) || isCommentStart(line)) {\n        (acc, index)\n      } else {\n        collectDefinition(acc ++ \"\\n\" ++ line, index + 1)\n      }\n    }\n  };\n\n  /*\n    Determine how much to increment or decrement comment nesting level\n  */\n  let getCommentIncr = (s: string): int => {\n    let nStart = Js.Re.test(s, startCommentPattern) ? 1 : 0;\n    let nEnd = Js.Re.test(s, endCommentPattern) ? 1 : 0;\n    nStart - nEnd;\n  }\n  \n  let rec collectComment = (acc: string, index: int, nesting: int): (string, int) => {\n    if (index >= Ba.length(lines)) {\n      (acc, index)\n    } else {\n      let line = lines[index];\n      let newNesting = nesting + getCommentIncr(line)\n      if (Js.Re.test(line, endCommentPattern) && newNesting == 0) {\n        (acc ++ \"\\n\" ++ line, index)\n      } else {\n        collectComment(acc ++ \"\\n\" ++ line, index + 1, newNesting)\n      }\n    }\n  };\n\n  let processDefn = (defn: string): string => {\n    let matchResult = Js.String.match([%re \"/^(val|external)\\\\s*([A-Za-z0-9_.]+)/\"], defn);\n    let identifier = switch (matchResult) {\n      | Some(matches) => matches[2] /* 0 = whole matched string, 1 = val/external 2 = id */\n      | None => \"*unknown name*\"\n    };\n    \"### \" ++ moduleName ++ \".\" ++ identifier ++ \"\\n\" ++\n    \"```reason\\n\" ++\n    Utils.multiLineToRE(Utils.Interface, defn) ++\n    \"```\\n\\n\" ++\n    \"```ocaml\\n\" ++\n    defn ++\n    \"\\n```\\n\\n\";\n  };\n\n  let replaceCodeBrackets = (s: string): string => {\n    Js.String.replaceByRe([%re {|/\\[([^\\]]+)\\]/g|}], \"`$1`\", s); \n  };  \n\n  let massageExample = (items: array(string)): string => {\n    let preExample = Js.Types.test(items[1], Js.Types.String) ? replaceCodeBrackets(items[1]) : \"\";\n    let postExample = Js.Types.test(items[3], Js.Types.String) ? replaceCodeBrackets(items[3]) : \"\";\n    let reasonExample = Utils.multiLineToRE(Utils.Implementation, items[2]);\n    preExample ++ \"\\nExamples:\\n\" ++\n      \"```ocaml\\n\" ++\n      items[2] ++\n      \"\\n```\\n\\n```reason\\n\" ++\n      reasonExample ++\n      \"\\n```\\n\" ++ postExample ++ \"\\n\";\n  };\n  \n  let examplePattern = [%re {|/\\(\\*\\*((?:.|\\n)+)?@example \\{\\[((?:.|\\n)+)\\]\\}((?:.|\\n)*)\\*\\)/|}];\n  let noExamplePattern = [%re {|/\\(\\*\\*((?:.|\\n)*)\\*\\)/|}]\n  \n  let processComment = (comment: string): string => {\n    let result = Js.String.match(examplePattern, comment);\n    let modified = switch (result) {\n      | Some(items) => massageExample(items)\n      | None => {\n          let result2 = Js.String.match(noExamplePattern, comment);\n          switch (result2) {\n            | Some(items) => \"\\n\" ++ replaceCodeBrackets(items[1]) ++ \"\\n\"\n            | None => \"\"\n          }\n      }\n    };\n\n    modified;\n  };\n\n  if (index >= Ba.length(lines)) {\n    result\n  } else {\n    let line = lines[index];\n    if (Js.Re.test(line, defnPattern)) {\n      let (defn, n) = collectDefinition(line, index + 1);\n      processLines(moduleName, result ++ processDefn(defn), lines, n);\n    } else if (isCommentStart(line)) {\n      /* Nesting starts at 1 because we have a comment start on this line */\n      let (comment, n) = collectComment(line, index + 1, 1);\n      processLines(moduleName, result ++ processComment(comment), lines, n);\n    } else {\n      processLines(moduleName, result, lines, index + 1)\n    }\n  }\n};\n\nlet processFile = (fileName: string, moduleName: string) : unit => {\n  Js.log2(\"Reading\", fileName);\n  let inStr = Node.Fs.readFileAsUtf8Sync(fileName);\n  let lines = Js.String.split(\"\\n\", inStr);\n\n  processLines(moduleName, \"---\\ntitle: \" ++ moduleName ++ \"\\n---\\n\", lines, 0) -> Js.log;\n\n};\n\n/* --- Main --- */\nswitch ((Ba.get(Node.Process.argv, 0), Ba.get(Node.Process.argv, 1), Ba.get(Node.Process.argv, 2),\n  Ba.get(Node.Process.argv, 3))) {\n  | (_, _, Some(inFileName), Some(moduleName)) => processFile(inFileName, moduleName)\n  | (Some(node), Some(prog), _, _) =>\n    Js.log(\"Usage: \" ++ node ++ \" \" ++ prog ++ \" inputfile.mli ModuleName\")\n  | (_, _, _, _) =>\n    Js.log(\"How did you get here without NodeJS or a program to run?\")\n};\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
➡️ running bsc /home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/bsc.exe -c -I '/home/david/reasonlab/mli_to_markdown/lib/bs' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules' -I '/home/david/reasonlab/mli_to_markdown/lib/bs/src/node_modules/.lsp' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-refmt/lib/bs/src' -I '/home/david/reasonlab/mli_to_markdown/node_modules/bs-platform/lib/ocaml' -bin-annot -bs-no-builtin-ppx-ml -open Docconvert -ppx '/home/david/.nvm/versions/node/v11.7.0/lib/node_modules/bs-platform/lib/bsppx.exe' -nostdlib -color always -w -30-40+6+7+27+32..39+44+45+101 -bs-re-out -impl /home/david/reasonlab/mli_to_markdown/node_modules/.lsp/MliToMarkdown-Doc_convert.ast with pwd /home/david/reasonlab/mli_to_markdown
Ident!! Belt.Array
<< Replacing lastDefinitions for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending response {"id": 127, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 2, "character": 4}, "end": {"line": 2, "character": 15}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 3, "character": 4}, "end": {"line": 3, "character": 26}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 4, "character": 4}, "end": {"line": 4, "character": 23}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 5, "character": 4}, "end": {"line": 5, "character": 21}}, "command": {"title": "Js.Re2.t", "command": ""}}, {"range": {"start": {"line": 7, "character": 4}, "end": {"line": 7, "character": 18}}, "command": {"title": "string => bool", "command": ""}}, {"range": {"start": {"line": 11, "character": 8}, "end": {"line": 11, "character": 20}}, "command": {"title": "(\n  string,\n  string,\n  array(string),\n  int\n) => string", "command": ""}}, {"range": {"start": {"line": 116, "character": 4}, "end": {"line": 116, "character": 15}}, "command": {"title": "(string, string) => unit", "command": ""}}]}
Running diagnostics for file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re
Sending notification {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///home/david/reasonlab/mli_to_markdown/src/MliToMarkdown.re", "diagnostics": []}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"shutdown","params":null}
Sending response {"id": 128, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
